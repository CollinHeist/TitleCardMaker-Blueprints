name: Test Blueprint Submission

on:
  issues:
    types: [ reopened, opened ]
  issue_comment:
    types: [ created ]

jobs:
  test_issue_blueprint:
    # Run on issue creation and if /test-blueprint is commented
    if: ${{ github.event_name == 'issues' || (startsWith(github.event.issue.title, '[Blueprint]') && contains(github.event.comment.body, '/test-blueprint')) }}
    runs-on: ubuntu-latest

    steps:
      # Check out repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: refs/heads/staging
          persist-credentials: false
          fetch-depth: 0

      # - name: Run GitHub issue forms parser
      #   id: parse_issue
      #   uses: edumserrano/github-issue-forms-parser@v1.3.5
      #   with:
      #     template-filepath: '.github/ISSUE_TEMPLATE/new_blueprint.yml'
      #     issue-form-body: '${{ github.event.issue.body }}'

      # Run script to parse issue
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests "pydantic==1.*" pytest regex

      - name: Parse Issue into Blueprint
        env:
          ISSUE_BODY: ${{ toJson(github.event.issue.body) }}
          ISSUE_CREATOR: '${{ github.event.issue.user.login }}'
          # ISSUE_JSON: '${{ steps.parse_issue.outputs.parsed-issue }}'
        run: |
          python ./build/parse_submission.py

      # Test created Blueprint
      - name: Run pytest
        run: |
          pytest --junitxml=pytest.xml

      - name: Get Pytest Output
        id: pytestResults
        uses: MishaKav/pytest-coverage-comment@main
        with:
          junitxml-path: ./pytest.xml
          hide-comment: true

      - name: Surface failing tests
        if: always()
        uses: pmeier/pytest-results-action@main
        with:
          path: ./pytest.xml
          summary: true
          display-options: fEX
          fail-on-empty: true

      # - name: Create test summary
      #   if: always()
      #   uses: test-summary/action@dist
      #   with:
      #     paths: results/**/*.xml
      
      - name: Run tests
        if: always()
        uses: dariocurr/pytest-summary@main
        with:
          paths: tests
          options: --quiet 
          show: all

      # Comment on Issue with results if all passed
      - name: Comment Successful Pytest Results
        if: success()
        uses: peter-evans/create-or-update-comment@5f728c3dae25f329afbe34ee4d08eef25569d79f
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            # Blueprint Validation Results
            | Tests | Failures | Errors | Skipped | Time |
            | :---: | :---: | :---: | :---: | :---: |
            | ${{ steps.pytestResults.outputs.tests }} | ${{ steps.pytestResults.outputs.failures }} | ${{ steps.pytestResults.outputs.errors }} | ${{ steps.pytestResults.outputs.skipped }} | ${{ steps.pytestResults.outputs.time }} |

            > Note: Validated Blueprints can be merged with `/create-blueprint`.

      # Comment on Issue if failed
      - name: Comment Failing Pytest Results
        if: failure()
        uses: peter-evans/create-or-update-comment@5f728c3dae25f329afbe34ee4d08eef25569d79f
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            # Blueprint Validation Results
            Blueprint validation has __failed__. See the workflow summary for details.

      # Add labels for pass/failure
      - name: Add Passing Label
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["passed-tests"]
            })

      - name: Add Failure Label
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["failed-tests"]
            })

      # Remove old pass/failure labels
      - name: Remove Success Label
        if: ${{ failure() && contains(github.event.issue.labels.*.name, 'passed-tests') }}
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.removeLabel({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: ["passed-tests"]
            })

      - name: Remove Failure Label
        if: ${{ success() && contains(github.event.issue.labels.*.name, 'failed-tests') }}
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.removeLabel({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: ["failed-tests"]
            })
